df.tot.sf <- st_as_sf(df.tot.sp)
df.tot.sf <- st_transform(df.tot.sf, 6875) # 4258
df.tot.coord <- as.data.frame(st_coordinates(df.tot.sf))
ppts <- ppp(df.tot.coord[,"X"],
df.tot.coord[,"Y"],
window = w)
ppts.km <- rescale(ppts, 1000, "km")
# w.km <- rescale(w, 1000, "km")
Q   <- quadratcount(ppts.km, nx = 14, ny = 7)
# Q.d <- intensity(Q)
# Plot the density
# setwd("D:/Projet_FM/CIMO/leapfrogGH")
g.out  <- "_SI2-1_ppp.jpg"
png(filename = g.out,
width = 16, height = 12, units = "cm", res = 300)
par(mar = c(0, 0, 0, 0))
plot(intensity(Q, image=TRUE),
main = NULL,
las = 1,
frame.plot = FALSE)  # Plot density raster
plot(Q,
textargs = list(cex = .5, col = "white"),
add = TRUE,
frame.plot = FALSE)  # Add quadrat grid
dev.off()
shell.exec(g.out)
l.g.spat <- list()
## conditions (d'après Binder)
# stocke le tableau filtré et son nom
w1 <- "
(df.tot.sf$PN_1A == 1 |
df.tot.sf$PN_1B == 1 |
df.tot.sf$PN_1C == 1) &
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'CST|EME|LPPN|AAN|EAPN'))"# &
# !(str_detect(df.tot.sf$culture, 'MES'))"
w1.df <- eval(parse(text = paste0("df.tot.sf[", w1,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w1.df, "w1")
# -
w2 <- "
(df.tot.sf$PN_2A == 1 |
df.tot.sf$PN_2B == 1 |
df.tot.sf$PN_2C == 1) &
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'CST|ECST|LCST|EME|EAPN'))"
# !(str_detect(df.tot.sf$culture, 'MES')) &
# !(str_detect(df.tot.sf$culture, 'IMP_ARC')) &
# !(str_detect(df.tot.sf$culture, 'AAN'))"
w2.df <- eval(parse(text = paste0("df.tot.sf[", w2,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w2.df, "w2")
unique(w2.df$culture)
# -
w3A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'BTC|CST|ECST|LCST'))"
w3A.df <- eval(parse(text = paste0("df.tot.sf[", w3A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w3A.df, "w3A")
# -
w3B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'BTC|CST|ECST|LCST'))"
w3B.df <- eval(parse(text = paste0("df.tot.sf[", w3B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w3B.df, "w3B")
# -
w4A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'IMP|IMP_ARC|IMP_HMN|IMP_GDN|IMP_LGN|IMP_QRC|IMP_GTF|IMP_MAD|IMP|ACPS|IMP_PRH|IMP_PND'))"
w4A.df <- eval(parse(text = paste0("df.tot.sf[", w4A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w4A.df, "w4A")
# -
w4B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'IMP|IMP_ARC|IMP_HMN|IMP_GDN|IMP_LGN|IMP_QRC|IMP_GTF|IMP_MAD|IMP|ACPS|IMP_PRH|IMP_PND'))"
w4B.df <- eval(parse(text = paste0("df.tot.sf[", w4B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w4B.df, "w4B")
# -
w5A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'STK|STN|KRN'))"
w5A.df <- eval(parse(text = paste0("df.tot.sf[", w5A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w5A.df, "w5A")
# -
w5B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'STK|STN|KRN'))"
w5B.df <- eval(parse(text = paste0("df.tot.sf[", w5B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w5B.df, "w5B")
# -
w6A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'BFW|BFW_CSB|BFW_PDC|TFW$|TFW_RPL'))"
w6A.df <- eval(parse(text = paste0("df.tot.sf[", w6A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w6A.df, "w6A")
unique(w6A.df$culture)
# -
w6B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'BFW|BFW_CSB|BFW_PDC|TFW$|TFW_RPL'))"
w6B.df <- eval(parse(text = paste0("df.tot.sf[", w6B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w6B.df, "w6B")
# -
w7A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, '^CRD|CRD_BFP|CRD_SAP|CRD_ZFI'))"
w7A.df <- eval(parse(text = paste0("df.tot.sf[", w7A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w7A.df, "w7A")
unique(w7A.df$culture)
# -
w7B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, '^CRD|CRD_BFP|CRD_SAP|CRD_ZFI'))"
w7B.df <- eval(parse(text = paste0("df.tot.sf[", w7B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w7B.df, "w7B")
unique(w7B.df$culture)
# -
w8A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'EPI|EPI_TVC|EPI_GZ3'))"
w8A.df <- eval(parse(text = paste0("df.tot.sf[", w8A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w8A.df, "w8A")
# -
w8B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'EPI|EPI_TVC|EPI_GZ3'))"
w8B.df <- eval(parse(text = paste0("df.tot.sf[", w8B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w8B.df, "w8B")
# -
w9A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'DKV_KKN|DKV_DNL|DKV_VLS'))"
w9A.df <- eval(parse(text = paste0("df.tot.sf[", w9A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w9A.df, "w9A")
# -
w9B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'DKV_KKN|DKV_DNL|DKV_VLS'))"
w9B.df <- eval(parse(text = paste0("df.tot.sf[", w9B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w9B.df, "w9B")
# -
w10A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'LIN|LIN_SSV|LIN_FRN|LIN_VHO|LIN_FRL|LIN_PNC|LIN_ISO|LIN_GBN'))"
w10A.df <- eval(parse(text = paste0("df.tot.sf[", w10A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w10A.df, "w10A")
# -
w10B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'LIN|LIN_SSV|LIN_FRN|LIN_VHO|LIN_FRL|LIN_PNC|LIN_ISO|LIN_GBN'))"
w10B.df <- eval(parse(text = paste0("df.tot.sf[", w10B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w10B.df, "w10B")
# -
w11A <- "
(df.tot.sf$valeur_resume < 2) &
(str_detect(df.tot.sf$culture, 'WAN|TR_MX'))"
w11A.df <- eval(parse(text = paste0("df.tot.sf[", w11A,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w11A.df, "w11A")
# -
w11B <- "
(df.tot.sf$valeur_resume > 1) &
(str_detect(df.tot.sf$culture, 'WAN|TR_MX'))"
w11B.df <- eval(parse(text = paste0("df.tot.sf[", w11B,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w11B.df, "w11B")
# -
w12 <- "
(df.tot.sf$PN_3A == 1) &
(df.tot.sf$valeur_resume > 1)"
w12.df <- eval(parse(text = paste0("df.tot.sf[", w12,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w12.df, "w12")
# -
w13 <- "
(df.tot.sf$PN_3C == 1) &
(df.tot.sf$valeur_resume > 1)"
w13.df <- eval(parse(text = paste0("df.tot.sf[", w13,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w13.df, "w13")
# -
w14 <- "
(df.tot.sf$PN_4A == 1) &
(df.tot.sf$valeur_resume > 1)"
w14.df <- eval(parse(text = paste0("df.tot.sf[", w14,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w14.df, "w14")
# -
w15 <- "
(df.tot.sf$PN_4C == 1) &
(df.tot.sf$valeur_resume > 1)"
w15.df <- eval(parse(text = paste0("df.tot.sf[", w15,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w15.df, "w15")
# -
w16 <- "
(df.tot.sf$PN_3B == 1) &
(df.tot.sf$valeur_resume > 1)"
w16.df <- eval(parse(text = paste0("df.tot.sf[", w16,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w16.df, "w16")
# -
w17 <- "
(df.tot.sf$PN_3D == 1) &
(df.tot.sf$valeur_resume > 1)"
w17.df <- eval(parse(text = paste0("df.tot.sf[", w17,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w17.df, "w17")
# -
w18 <- "
(df.tot.sf$PN_4B == 1) &
(df.tot.sf$valeur_resume > 1)"
w18.df <- eval(parse(text = paste0("df.tot.sf[", w18,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w18.df, "w18")
# -
w19 <- "
(df.tot.sf$PN_4D == 1) &
(df.tot.sf$valeur_resume > 1)"
w19.df <- eval(parse(text = paste0("df.tot.sf[", w19,", ]")))
l.g.spat[[length(l.g.spat)+1]] <- list(w19.df, "w19")
#
for(i in 1:length(l.g.spat)){
# i <- 1 # 23
a.df.spat <- l.g.spat[[i]][[1]] # le tableau
a.df.spat.name <- l.g.spat[[i]][[2]] # son nom
# order
a.df.spat.ord <- a.df.spat[order(unlist(sapply(a.df.spat$culture,
function(x) which(cultures$code_aspect == x)))),]
a.df.spat.ord <- a.df.spat.ord[!is.na(a.df.spat.ord$site), ]
# deux types de cartes
if (a.df.spat.name %in% c("w1", "w2")){
# toute la Med
fond.sf <- bck.med
bbox.sf <- bbox.med
ty_H <- 12 ; ty_W <- 22
} else {
# seulement la Med occ
fond.sf <- bck.medOcc
bbox.sf <- bbox.medOcc
ty_H <- 12 ; ty_W <- 17
}
g.spat <- fond.sf %>%
ggmap() +
geom_point(data = a.df.spat,
aes(x = x, y = y, color = couleur, alpha = alpha),
size = 3.5) +
geom_point(data = a.df.spat, aes(x = x, y = y),
shape=21, size = 3.5, fill = NA, colour = "black" ) +
scale_color_identity(guide = "legend",
name = "cultures",
breaks = a.df.spat.ord$couleur,
label = a.df.spat.ord$culture) +
scale_alpha_identity() +
theme_bw() +
ty_theme +
annotation_north_arrow(height = unit(1, "cm"),
width = unit(1, "cm"),
location = "tr") +
ggsn::scalebar(location="bottomleft",
x.min = as.numeric(bbox.sf[1]),
x.max = as.numeric(bbox.sf[3]),
y.min = as.numeric(bbox.sf[2]),
y.max = as.numeric(bbox.sf[4]),
dist = 200, dist_unit = "km",
# dd2km = TRUE,
st.bottom = F,
model ='WGS84',
height = .01,
st.size =  4,
st.dist = .02,
transform = T,
hjust = 0)
g.spat.name <- paste0("_spat_", a.df.spat.name, ".jpg")
ggsave(g.spat.name, g.spat,
width = ty_W, height = ty_H)
print(paste("carte", g.spat.name, "faite !"))
}
shell.exec(g.spat.name) # ouvre le dernier plot
library(sp)
library(raster)
library(rgeos)
library(dplyr)
library(openxlsx)
########################################################
# prepare les données pour l'appli Leapfrog & son audit
########################################################
# auteurs:
#   - application: Thomas Huet <thomashuet7@gmail.com>
#   - base de données: Didier Binder <didier.binder@cepam.cnrs.fr>
# date:
#   - aout 2021
# institution:
#   - CEPAM-CNRS, UMR 7264 <https://www.cepam.cnrs.fr/>
########################################################
# tableau des périodes
PN_1A <- c(-7050, -6850)
PN_1B <- c(-6850, -6650)
PN_1C <- c(-6650, -6500)
PN_2A <- c(-6500, -6350)
PN_2B <- c(-6350, -6200)
PN_2C <- c(-6200, -6050)
PN_3A <- c(-6050, -5900)
PN_3B <- c(-5900, -5750)
PN_3C <- c(-5750, -5600)
PN_3D <- c(-5600, -5450)
PN_4A <- c(-5450, -5300)
PN_4B <- c(-5300, -5150)
PN_4C <- c(-5150, -5000)
PN_4D <- c(-5000, -4850)
PN_5 <- c(-4850, -4050)
periodes_df <- as.data.frame(cbind(PN_1A,PN_1B,PN_1C,
PN_2A,PN_2B,PN_2C,
PN_3A,PN_3B,PN_3C,PN_3D,
PN_4A,PN_4B,PN_4C,PN_4D,
PN_5))
rownames(periodes_df) <- c("tpq","taq")
# cultures - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# correspondances entre les cultures et leur couleur d'affichage (hexadecimal)
cultures <- read.xlsx("cultures.xlsx", skipEmptyRows=TRUE)
cultures <- cultures[!is.na(cultures$hexa) & !is.na(cultures$code_aspect), ]
fperiodes <- function(df){
for (i in seq(1, nrow(df))){
dates <- periodes <- c()
if (df[i,"PN_1A"] != 'NA') {
dates <- c(dates, periodes_df$PN_1A)
periodes <- c(periodes, "PN_1A")
}
if (df[i,"PN_1B"] != 'NA') {
dates <- c(dates, periodes_df$PN_1B)
periodes <- c(periodes, "PN_1B")
}
if (df[i,"PN_1C"] != 'NA') {
dates <- c(dates, periodes_df$PN_1C)
periodes <- c(periodes, "PN_1C")
}
if (df[i,"PN_2A"] != 'NA') {
dates <- c(dates, periodes_df$PN_2A)
periodes <- c(periodes, "PN_2A")
}
if (df[i,"PN_2B"] != 'NA') {
dates <- c(dates, periodes_df$PN_2B)
periodes <- c(periodes, "PN_2B")
}
if (df[i,"PN_2C"] != 'NA') {
dates <- c(dates, periodes_df$PN_2C)
periodes <- c(periodes, "PN_2C")
}
if (df[i,"PN_3A"] != 'NA') {
dates <- c(dates, periodes_df$PN_3A)
periodes <- c(periodes, "PN_3A")
}
if (df[i,"PN_3B"] != 'NA') {
dates <- c(dates, periodes_df$PN_3B)
periodes <- c(periodes, "PN_3B")
}
if (df[i,"PN_3C"] != 'NA') {
dates <- c(dates, periodes_df$PN_3C)
periodes <- c(periodes, "PN_3C")
}
if (df[i,"PN_3D"] != 'NA') {
dates <- c(dates, periodes_df$PN_3D)
periodes <- c(periodes, "PN_3D")
}
if (df[i,"PN_4A"] != 'NA') {
dates <- c(dates,periodes_df$PN_4A)
periodes <- c(periodes, "PN_4A")
}
if (df[i,"PN_4B"] != 'NA') {
dates <- c(dates, periodes_df$PN_4B)
periodes <- c(periodes, "PN_4B")
}
if (df[i,"PN_4C"] != 'NA') {
dates <- c(dates, periodes_df$PN_4C)
periodes <- c(periodes, "PN_4C")
}
if (df[i,"PN_4D"] != 'NA') {
dates <- c(dates,periodes_df$PN_4D)
periodes <- c(periodes, "PN_4D")
}
if (df[i,"PN_5"] != 'NA') {
dates <- c(dates, periodes_df$PN_5)
periodes <- c(periodes, "PN_5")
}
df[i,"tpq"] <- min(dates)
df[i,"taq"] <- max(dates)
df[i,"tpq.per"] <- min(periodes)
df[i,"taq.per"] <- max(periodes)
}
return(df)
}
# entites - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
n.file <- "entites.xlsx"
a.file <- paste0(getwd(), "/", n.file)
if (file.exists(a.file)){
print(paste0("donnees depuis '", n.file, "'"))
} else {print(paste0("Erreur: le fichier '", n.file, "' n'est pas retrouvé"))}
df.tot <- openxlsx::read.xlsx(a.file,
skipEmptyRows = TRUE)
df.tot$lbl <- NA
df.tot[is.na(df.tot)] <- 'NA'
df.tot <- fperiodes(df.tot) # calcule tpq/taq BC
df.tot$tpq[df.tot$tpq == 'NA'] <- Inf
df.tot$taq[df.tot$taq == 'NA'] <- -Inf
df.tot <- df.tot[!(df.tot$tpq == Inf), ] # rm
df.tot$tpq <- as.numeric(df.tot$tpq)
df.tot$taq <- as.numeric(df.tot$taq)
# fiabilite - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
df.tot$fiabilite_context[df.tot$fiabilite_context %in% c("autre_pas_infos", "NA")] <- "autre_pas_infos/NA"
df.tot$fiabilite_dates[df.tot$fiabilite_dates %in% c("mediocre", "NA")] <- "mediocre/NA"
df.tot$fiabilite_key <- paste0(df.tot$fiabilite_context, '_', df.tot$fiabilite_dates)
# jointure
df.fiab <- openxlsx::read.xlsx(paste0(getwd(),"/fiabilites.xlsx"),
skipEmptyRows = TRUE)
df.fiab$fiabilite_key <- paste0(df.fiab$fiabilite_context, '_', df.fiab$fiabilite_dates)
df.fiab$fiabilite_dates <- df.fiab$fiabilite_context <- NULL
df.tot <- merge(df.tot, df.fiab, by="fiabilite_key", all.x=T)
df.tot$fiabilite_key <- NULL
val.resum <- unique(df.tot$valeur_resume)
# période
lper <- colnames(periodes_df)
dper <- list(PN_1A, PN_1B, PN_1C,
PN_2A, PN_2B, PN_2C,
PN_3A, PN_3B, PN_3C, PN_3D,
PN_4A, PN_4B, PN_4C, PN_4D,
PN_5)
# actualise les taq/tpq du tableau a partir des périodes
for (r in seq(1:nrow(df.tot))){
ldate <- c()
for (c in lper){
if (df.tot[r,c] != 'NA'){
idx_colnme <- match(c,lper) # l'index de la période représentée
ldate <- c(ldate, as.vector(dper[[idx_colnme]]))
}
}
df.tot[r,"tpq"] <- min(ldate)
df.tot[r,"taq"] <- max(ldate)
}
# réarrange les colonnes
refcols <- c("site", "type_site", "culture", "cul_descr",
lper,
"tpq", "taq",
"x", "y", "altitude",
"valeur_resume", "fiabilite_resume",
"fiabilite_context", "fiabilite_dates", "fiabilite_coord",
"commune", "departement", "region", "pays")
df.tot <- df.tot[, c(refcols, setdiff(names(df.tot), refcols))]
# supprime certaines colonnes pour la table dynamique
drops.columns <- c("couleur", "lbl", "tpq.per", "taq.per",
"fiabilite_context_eng", "fiabilite_dates_eng",
"valeur_context", "valeur_datation",
"alpha", "contour",
"idf")
# labels
df.tot$lbl <- NA
for (i in seq(1,nrow(df.tot))){
desc <- paste0("<b>", df.tot[i,"site"], "</b> <font size='-2'>", df.tot[i,"type_site"], "</font><br>",
"<span style='color: ", df.tot[i,"couleur"],";'><b>", df.tot[i,"culture"], "</b></span>  ",df.tot[i,"cul_descr"],"<br>",
df.tot[i,"tpq.per"]," - ", df.tot[i,"taq.per"], " | ", df.tot[i,"tpq"]," / ", df.tot[i,"taq"]," BC<br>",
"fiab.resume: ", df.tot[i,"fiabilite_resume"]," (", df.tot[i,"valeur_resume"], ")<br>",
"<font size='-2'>",
"fiab.context.: ", df.tot[i,"fiabilite_context"]," | fiab.datat.: ", df.tot[i,"fiabilite_dates"],"<br>",
"fiab.coord: ", df.tot[i,"fiabilite_coord"],
"</font>"
)
df.tot[i,"lbl"]  <- desc
}
# nettoyage du tableau
df.tot[,"site"] <- as.character(df.tot[,"site"])
df.tot <- df.tot[df.tot$culture != "Ressources",]
df.tot <- df.tot[df.tot$culture != "Indetermine",]
df.tot <- df.tot[!is.na(df.tot$PN_1A) |
!is.na(df.tot$PN_1B) |
!is.na(df.tot$PN_1C) |
!is.na(df.tot$PN_2A) |
!is.na(df.tot$PN_2B) |
!is.na(df.tot$PN_2C) |
!is.na(df.tot$PN_3A) |
!is.na(df.tot$PN_3B) |
!is.na(df.tot$PN_3C) |
!is.na(df.tot$PN_3D) |
!is.na(df.tot$PN_4A) |
!is.na(df.tot$PN_4B) |
!is.na(df.tot$PN_4C) |
!is.na(df.tot$PN_4D) |
!is.na(df.tot$PN_5),]
df.tot$idf <- seq(1, nrow(df.tot))
# filtre sur les cultures existantes
cultures <- cultures[cultures$code_aspect %in% df.tot$culture, ]
lcul_col <- as.list(cultures$hexa)
lcul_col <- lapply(lcul_col,toupper)
names(lcul_col) <- cultures$code_aspect
# couleurs
myColors <- c()
for (i in names(lcul_col)){
myColors <- c(myColors,as.character(lcul_col[i]))
}
df.tot$couleur <- NA
for (i in seq(1:nrow(df.tot))){
df.tot[i,"couleur"]  <- toupper(as.character(lcul_col[df.tot[i, "culture"]]))
}
# symbologie des entités sur la fiabilité (alpha et contour)
df.tot$alpha <- df.tot$contour <- NA
df.tot$alpha[df.tot$valeur_resume == 3] <- 1
df.tot$contour[df.tot$valeur_resume == 3] <- 2
df.tot$alpha[df.tot$valeur_resume == 2] <- 0.2
df.tot$contour[df.tot$valeur_resume == 2] <- 1.5
df.tot$alpha[df.tot$valeur_resume == 1] <- 0
df.tot$contour[df.tot$valeur_resume == 1] <- 1.5
# schéma spatial
xy <- list(longitude=c(as.numeric(df.tot$x)),
latitude=c(as.numeric(df.tot$y)))
df.tot.sp <- SpatialPointsDataFrame(coords = xy,
data = df.tot,
proj4string = CRS("+proj=longlat +datum=WGS84"))
shiny::runApp()
runApp('D:/Projet_FM/CIMO/leapfrog5/leapfrog_11_3.R')
runApp('D:/Projet_FM/CIMO/leapfrogGH/leapfrog_13_2.R')
library(sp)
shiny::runApp()
runApp()
?addWMS
runApp()
